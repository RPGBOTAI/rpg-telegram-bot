import os
import json
import asyncio
import logging
from typing import Dict, Any

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from openai import OpenAI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - —á–∏—Ç–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞–ø—Ä—è–º—É
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
GOOGLE_SCRIPT_URL = os.environ.get('GOOGLE_SCRIPT_URL')

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
    exit(1)

if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
    exit(1)
    
if not GOOGLE_SCRIPT_URL:
    logger.error("GOOGLE_SCRIPT_URL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–ª–∞—Å–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
CLASSES = {
    'knight': 'üõ°Ô∏è –õ–∏—Ü–∞—Ä',
    'mage': 'üßô‚Äç‚ôÇÔ∏è –ú–∞–≥', 
    'archer': 'üèπ –õ—É—á–Ω–∏–∫',
    'thief': 'üó°Ô∏è –ó–ª–æ–¥—ñ–π',
    'cleric': '‚öïÔ∏è –ñ—Ä–µ—Ü—å'
}

class GoogleSheetsAPI:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets —á–µ—Ä–µ–∑ Apps Script"""
    
    @staticmethod
    def make_request(data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ Google Apps Script"""
        try:
            response = requests.post(
                GOOGLE_SCRIPT_URL,
                json=data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            return response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Google Sheets: {e}")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    def get_player(user_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è"""
        return GoogleSheetsAPI.make_request({
            "action": "get_player",
            "user_id": str(user_id)
        })
    
    @staticmethod
    def create_player(user_id: int, name: str, player_class: str) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è"""
        return GoogleSheetsAPI.make_request({
            "action": "create_player",
            "user_id": str(user_id),
            "name": name,
            "class": player_class
        })
    
    @staticmethod
    def update_hp(user_id: int, hp: int) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª—é—î HP –≥—Ä–∞–≤—Ü—è"""
        return GoogleSheetsAPI.make_request({
            "action": "update_hp",
            "user_id": str(user_id),
            "hp_current": hp
        })

class RPGGameLogic:
    """–ö–ª–∞—Å –¥–ª—è —ñ–≥—Ä–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏"""
    
    @staticmethod
    def get_gpt_response(prompt: str, player_data: Dict) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –∑ —ñ–≥—Ä–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é"""
        
        system_prompt = f"""
        –¢–∏ - –º–∞–π—Å—Ç–µ—Ä –≥—Ä–∏ D&D. –ì—Ä–∞–≤–µ—Ü—å:
        - –Ü–º'—è: {player_data.get('name')}
        - –ö–ª–∞—Å: {player_data.get('class')} 
        - –†—ñ–≤–µ–Ω—å: {player_data.get('level')}
        - HP: {player_data.get('hp_current')}/{player_data.get('hp_max')}
        - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: STR:{player_data.get('str')} DEX:{player_data.get('dex')} CON:{player_data.get('con')} INT:{player_data.get('int')} WIS:{player_data.get('wis')} CHA:{player_data.get('cha')}
        - –Ü–Ω–≤–µ–Ω—Ç–∞—Ä: {player_data.get('inventory')}
        
        –ó–ê–í–ñ–î–ò –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π –≤ JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
        {{
            "main_response": "–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –≥—Ä–∞–≤—Ü—è",
            "dice_required": {{
                "type": "d20",
                "modifier": "+STR",
                "difficulty": 15
            }},
            "hint": "–ö–æ—Ä–æ—Ç–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∞ (1-2 —Ä–µ—á–µ–Ω–Ω—è) –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∫–ª–∞—Å—É",
            "damage": 0,
            "xp_reward": 0
        }}
        
        –î—ñ–π –≥—Ä–∞–≤—Ü—è: {prompt}
        """
        
        try:
            response = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            content = response.choices[0].message.content
            return json.loads(content)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ GPT: {e}")
            return {
                "main_response": "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –º–∞–≥—ñ—î—é...",
                "dice_required": None,
                "hint": "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                "damage": 0,
                "xp_reward": 0
            }

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ —ñ—Å–Ω—É—î
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if player_data["success"]:
        player = player_data["player"]
        await update.message.reply_text(
            f"üéÆ –í—ñ—Ç–∞—é –∑–Ω–æ–≤—É, {player['name']}!\n"
            f"üõ°Ô∏è –ö–ª–∞—Å: {CLASSES.get(player['class'], player['class'])}\n"
            f"‚ù§Ô∏è HP: {player['hp_current']}/{player['hp_max']}\n"
            f"‚≠ê –†—ñ–≤–µ–Ω—å: {player['level']}\n\n"
            f"–ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–∏–≥–æ–¥? –ù–∞–ø–∏—à–∏ —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏!"
        )
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É
        keyboard = []
        for class_key, class_name in CLASSES.items():
            keyboard.append([InlineKeyboardButton(class_name, callback_data=f"class_{class_key}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üè∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ RPG –ø—Ä–∏–≥–æ–¥–∏!\n\n"
            "–û–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:",
            reply_markup=reply_markup
        )

async def handle_class_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É"""
    query = update.callback_query
    await query.answer()
    
    class_chosen = query.data.replace("class_", "")
    user_id = query.from_user.id
    user_name = query.from_user.first_name or "–ì–µ—Ä–æ–π"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–≤—Ü—è
    result = GoogleSheetsAPI.create_player(user_id, user_name, class_chosen)
    
    if result["success"]:
        await query.edit_message_text(
            f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ!\n\n"
            f"üë§ –Ü–º'—è: {user_name}\n"
            f"üõ°Ô∏è –ö–ª–∞—Å: {CLASSES[class_chosen]}\n\n"
            f"–í–∞—à–∞ –ø—Ä–∏–≥–æ–¥–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è! –ù–∞–ø–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏."
        )
    else:
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –≥—Ä–∞–≤—Ü—ñ–≤"""
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if not player_data["success"]:
        await update.message.reply_text(
            "‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ—é /start"
        )
        return
    
    player = player_data["player"]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
    gpt_response = RPGGameLogic.get_gpt_response(user_message, player)
    
    # –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –∫—É–±–∏–∫–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞
    if gpt_response.get("dice_required"):
        dice_info = gpt_response["dice_required"]
        dice_text = f"üé≤ {dice_info['type']} {dice_info.get('modifier', '')}"
        keyboard.append([InlineKeyboardButton(dice_text, callback_data="roll_dice")])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∏ (–∑–∞–≤–∂–¥–∏)
    keyboard.append([InlineKeyboardButton("üí° –ü—ñ–¥–∫–∞–∑–∫–∞", callback_data="show_hint")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
    context.user_data['last_gpt_response'] = gpt_response
    context.user_data['player_data'] = player
    
    await update.message.reply_text(
        gpt_response["main_response"],
        reply_markup=reply_markup
    )

async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "show_hint":
        gpt_response = context.user_data.get('last_gpt_response', {})
        hint = gpt_response.get('hint', '–ü—ñ–¥–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        await query.edit_message_text(
            f"üí° {hint}\n\n"
            f"–©–æ —Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?"
        )
    
    elif query.data == "roll_dice":
        # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫–∞
        await query.edit_message_text("üé≤ –ö–∏–¥–∞—î–º–æ –∫—É–±–∏–∫... (–ø–æ–∫–∏ —â–æ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(handle_class_selection, pattern="^class_"))
    application.add_handler(CallbackQueryHandler(handle_button_press, pattern="^(show_hint|roll_dice)$"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
