import os
import json
import asyncio
import logging
import random
from typing import Dict, Any, List, Optional
from datetime import datetime

import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from openai import OpenAI

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - —á–∏—Ç–∞—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞–ø—Ä—è–º—É
TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
GOOGLE_SCRIPT_URL = os.environ.get('GOOGLE_SCRIPT_URL')

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å—ñ –∑–º—ñ–Ω–Ω—ñ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ
if not TELEGRAM_BOT_TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
    exit(1)

if not OPENAI_API_KEY:
    logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
    exit(1)
    
if not GOOGLE_SCRIPT_URL:
    logger.error("GOOGLE_SCRIPT_URL –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π!")
    exit(1)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI –∫–ª—ñ—î–Ω—Ç–∞
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–ª–∞—Å–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤
CLASSES = {
    'knight': {
        'name': 'üõ°Ô∏è –õ–∏—Ü–∞—Ä',
        'stats': {'str': 15, 'dex': 10, 'con': 14, 'int': 8, 'wis': 12, 'cha': 13},
        'hp_base': 15,
        'mp_base': 0,
        'equipment': ['sword', 'shield', 'chainmail'],
        'gold': 50,
        'abilities': ['mighty_strike', 'protect_ally']
    },
    'mage': {
        'name': 'üßô‚Äç‚ôÇÔ∏è –ú–∞–≥',
        'stats': {'str': 8, 'dex': 12, 'con': 10, 'int': 15, 'wis': 14, 'cha': 11},
        'hp_base': 8,
        'mp_base': 10,
        'equipment': ['staff', 'robe', 'spellbook'],
        'gold': 30,
        'abilities': ['magic_missile', 'fireball', 'heal']
    },
    'archer': {
        'name': 'üèπ –õ—É—á–Ω–∏–∫',
        'stats': {'str': 12, 'dex': 15, 'con': 13, 'int': 10, 'wis': 14, 'cha': 8},
        'hp_base': 12,
        'mp_base': 0,
        'equipment': ['bow', 'arrows:30', 'leather_armor'],
        'gold': 40,
        'abilities': ['precise_shot', 'multi_shot']
    },
    'thief': {
        'name': 'üó°Ô∏è –ó–ª–æ–¥—ñ–π',
        'stats': {'str': 10, 'dex': 15, 'con': 12, 'int': 13, 'wis': 11, 'cha': 14},
        'hp_base': 10,
        'mp_base': 0,
        'equipment': ['dagger', 'dagger', 'thieves_tools', 'dark_cloak'],
        'gold': 60,
        'abilities': ['backstab', 'stealth']
    },
    'cleric': {
        'name': '‚öïÔ∏è –ñ—Ä–µ—Ü—å',
        'stats': {'str': 11, 'dex': 10, 'con': 13, 'int': 12, 'wis': 15, 'cha': 14},
        'hp_base': 12,
        'mp_base': 8,
        'equipment': ['mace', 'holy_symbol', 'healing_potion:2'],
        'gold': 35,
        'abilities': ['mass_heal', 'turn_undead']
    }
}

# –ü—Ä–µ–¥–º–µ—Ç–∏ —Ç–∞ —ó—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
ITEMS = {
    'sword': {'name': '–ú–µ—á', 'damage': 'd8', 'type': 'weapon', 'price': 50},
    'dagger': {'name': '–ö–∏–Ω–¥–∂–∞–ª', 'damage': 'd4', 'type': 'weapon', 'price': 10},
    'bow': {'name': '–õ—É–∫', 'damage': 'd8', 'type': 'ranged', 'price': 40},
    'staff': {'name': '–ü–æ—Å–æ—Ö', 'damage': 'd6', 'type': 'weapon', 'price': 25},
    'mace': {'name': '–ë—É–ª–∞–≤–∞', 'damage': 'd6', 'type': 'weapon', 'price': 30},
    'shield': {'name': '–©–∏—Ç', 'defense': 2, 'type': 'armor', 'price': 25},
    'chainmail': {'name': '–ö–æ–ª—å—á—É–≥–∞', 'defense': 3, 'type': 'armor', 'price': 100},
    'leather_armor': {'name': '–®–∫—ñ—Ä—è–Ω–∞ –±—Ä–æ–Ω—è', 'defense': 2, 'type': 'armor', 'price': 30},
    'robe': {'name': '–ú–∞–Ω—Ç—ñ—è', 'defense': 1, 'type': 'armor', 'price': 20},
    'healing_potion': {'name': '–ó—ñ–ª–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è', 'heal': 'd6+1', 'type': 'consumable', 'price': 20}
}

# –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
ABILITIES = {
    'mighty_strike': {'name': '–ú–æ–≥—É—Ç–Ω—ñ–π —É–¥–∞—Ä', 'uses_per_battle': 1, 'effect': 'double_damage'},
    'protect_ally': {'name': '–ó–∞—Ö–∏—Å—Ç —Å–æ—é–∑–Ω–∏–∫–∞', 'uses_per_battle': 1, 'effect': 'redirect_damage'},
    'magic_missile': {'name': '–ú–∞–≥—ñ—á–Ω–∞ —Å—Ç—Ä—ñ–ª–∞', 'mp_cost': 2, 'damage': 'd4+INT', 'auto_hit': True},
    'fireball': {'name': '–í–æ–≥–Ω—è–Ω–∞ –∫—É–ª—è', 'mp_cost': 4, 'damage': 'd8+INT', 'area': True},
    'heal': {'name': '–õ—ñ–∫—É–≤–∞–Ω–Ω—è', 'mp_cost': 2, 'heal': 'd6+WIS'},
    'precise_shot': {'name': '–¢–æ—á–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª', 'uses_per_battle': 1, 'effect': '+5_attack'},
    'multi_shot': {'name': '–ë–∞–≥–∞—Ç–æ–∫—Ä–∞—Ç–Ω–∏–π –ø–æ—Å—Ç—Ä—ñ–ª', 'uses_per_battle': 1, 'effect': '3_arrows'},
    'backstab': {'name': '–£–¥–∞—Ä –∑—ñ —Å–ø–∏–Ω–∏', 'uses_per_battle': 1, 'damage': '+d6'},
    'stealth': {'name': '–°–∫—Ä–∞–¥–∞–Ω–Ω—è', 'uses_per_battle': 1, 'effect': 'advantage'},
    'mass_heal': {'name': '–ú–∞—Å–æ–≤–µ –ª—ñ–∫—É–≤–∞–Ω–Ω—è', 'uses_per_day': 1, 'heal': 'd6_all'},
    'turn_undead': {'name': '–í–∏–≥–Ω–∞–Ω–Ω—è –Ω–µ–∂–∏—Ç—ñ', 'uses_per_battle': 1, 'effect': 'fear_undead'}
}

class GoogleSheetsAPI:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Google Sheets —á–µ—Ä–µ–∑ Apps Script"""
    
    @staticmethod
    def make_request(data: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø–∏—Ç –¥–æ Google Apps Script"""
        try:
            response = requests.post(
                GOOGLE_SCRIPT_URL,
                json=data,
                headers={'Content-Type': 'application/json'},
                timeout=30
            )
            return response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Google Sheets: {e}")
            return {"success": False, "error": str(e)}
    
    @staticmethod
    def get_player(user_id: int) -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è"""
        return GoogleSheetsAPI.make_request({
            "action": "get_player",
            "user_id": str(user_id)
        })
    
    @staticmethod
    def create_player(user_id: int, name: str, player_class: str) -> Dict[str, Any]:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –≥—Ä–∞–≤—Ü—è"""
        class_data = CLASSES[player_class]
        return GoogleSheetsAPI.make_request({
            "action": "create_player",
            "user_id": str(user_id),
            "name": name,
            "class": player_class,
            "level": 1,
            "hp_current": class_data['hp_base'],
            "hp_max": class_data['hp_base'],
            "mp_current": class_data['mp_base'],
            "mp_max": class_data['mp_base'],
            "str": class_data['stats']['str'],
            "dex": class_data['stats']['dex'],
            "con": class_data['stats']['con'],
            "int": class_data['stats']['int'],
            "wis": class_data['stats']['wis'],
            "cha": class_data['stats']['cha'],
            "xp": 0,
            "gold": class_data['gold'],
            "inventory": ','.join(class_data['equipment'])
        })
    
    @staticmethod
    def update_player(user_id: int, updates: Dict[str, Any]) -> Dict[str, Any]:
        """–û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è"""
        data = {
            "action": "update_player",
            "user_id": str(user_id)
        }
        data.update(updates)
        return GoogleSheetsAPI.make_request(data)
    
    @staticmethod
    def get_ability_usage(user_id: int, ability: str) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∞—Å—è –∑–¥—ñ–±–Ω—ñ—Å—Ç—å"""
        return GoogleSheetsAPI.make_request({
            "action": "get_ability",
            "user_id": str(user_id),
            "ability_name": ability
        })
    
    @staticmethod
    def use_ability(user_id: int, ability: str) -> Dict[str, Any]:
        """–ü–æ–∑–Ω–∞—á–∞—î –∑–¥—ñ–±–Ω—ñ—Å—Ç—å —è–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—É"""
        return GoogleSheetsAPI.make_request({
            "action": "use_ability",
            "user_id": str(user_id),
            "ability_name": ability,
            "used": True
        })

class DiceRoller:
    """–ö–ª–∞—Å –¥–ª—è –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫—ñ–≤"""
    
    @staticmethod
    def roll(dice_str: str) -> int:
        """–ö–∏–¥–∞—î –∫—É–±–∏–∫ –ø–æ —Å—Ç—Ä–æ—Ü—ñ —Ç–∏–ø—É 'd20', '2d6', 'd8+3'"""
        try:
            # –ü–∞—Ä—Å–∏–º–æ —Å—Ç—Ä–æ–∫—É –∫—É–±–∏–∫–∞
            if '+' in dice_str:
                dice_part, bonus = dice_str.split('+')
                bonus = int(bonus)
            elif '-' in dice_str:
                dice_part, penalty = dice_str.split('-')
                bonus = -int(penalty)
            else:
                dice_part = dice_str
                bonus = 0
            
            if 'd' in dice_part:
                if dice_part.startswith('d'):
                    count = 1
                    sides = int(dice_part[1:])
                else:
                    count, sides = dice_part.split('d')
                    count = int(count)
                    sides = int(sides)
            else:
                # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ
                return int(dice_part) + bonus
            
            total = sum(random.randint(1, sides) for _ in range(count))
            return total + bonus
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–∏–¥–∫—É –∫—É–±–∏–∫–∞ {dice_str}: {e}")
            return 1

    @staticmethod
    def get_modifier(stat_value: int) -> int:
        """–û–±—á–∏—Å–ª—é—î –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        return (stat_value - 10) // 2

class RPGGameLogic:
    """–ö–ª–∞—Å –¥–ª—è —ñ–≥—Ä–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏"""
    
    @staticmethod
    def get_gpt_response(prompt: str, player_data: Dict, context: str = "") -> Dict[str, Any]:
        """–û—Ç—Ä–∏–º—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT –∑ —ñ–≥—Ä–æ–≤–æ—é –ª–æ–≥—ñ–∫–æ—é"""
        
        # –§–æ—Ä–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏
        stats_str = ""
        for stat in ['str', 'dex', 'con', 'int', 'wis', 'cha']:
            value = player_data.get(stat, 10)
            modifier = DiceRoller.get_modifier(value)
            mod_str = f"+{modifier}" if modifier >= 0 else str(modifier)
            stats_str += f"{stat.upper()}: {value}({mod_str}) "
        
        system_prompt = f"""
        –¢–∏ - –ú–∞–π—Å—Ç–µ—Ä –≥—Ä–∏ (Game Master) —É RPG –≥—Ä—ñ –≤ —Å—Ç–∏–ª—ñ D&D.

        –ü–û–¢–û–ß–ù–ò–ô –ì–†–ê–í–ï–¶–¨:
        - –Ü–º'—è: {player_data.get('name')}
        - –ö–ª–∞—Å: {CLASSES.get(player_data.get('class'), {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}
        - –†—ñ–≤–µ–Ω—å: {player_data.get('level')}
        - HP: {player_data.get('hp_current')}/{player_data.get('hp_max')}
        - MP: {player_data.get('mp_current')}/{player_data.get('mp_max')}
        - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {stats_str}
        - –î–æ—Å–≤—ñ–¥: {player_data.get('xp')} XP
        - –ó–æ–ª–æ—Ç–æ: {player_data.get('gold')}
        - –Ü–Ω–≤–µ–Ω—Ç–∞—Ä: {player_data.get('inventory', '')}

        –ö–û–ù–¢–ï–ö–°–¢: {context}

        –¢–í–û–Ø –†–û–õ–¨:
        1. –ê–Ω–∞–ª—ñ–∑—É–π –¥—ñ—ó –≥—Ä–∞–≤—Ü—ñ–≤ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞–π —ó—Ö –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å
        2. –û—Ü—ñ–Ω—é–π –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–æ–¥—ñ–≤ (1 —Ö—ñ–¥, 2 —Ö–æ–¥–∏, –Ω–µ–º–æ–∂–ª–∏–≤–æ)
        3. –í–∏–∑–Ω–∞—á–∞–π —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å (d20 + –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ç–∏ —Ü—ñ–ª—ñ)
        4. –ì–µ–Ω–µ—Ä—É–π —Ü—ñ–∫–∞–≤–∏–π —Å–≤—ñ—Ç —Ç–∞ —Å–∏—Ç—É–∞—Ü—ñ—ó
        5. –ë—É–¥—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∏–º –∞–ª–µ –≤–∏–∫–ª–∏–∫–∞—é—á–∏–º

        –ü–†–ê–í–ò–õ–ê –ö–ò–î–ö–Ü–í:
        - –ü—Ä–æ—Å—Ç–∞ –¥—ñ—è: –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —É—Å–ø—ñ—Ö
        - –°–µ—Ä–µ–¥–Ω—è –¥—ñ—è: d20 + –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä ‚â• 12-15
        - –°–∫–ª–∞–¥–Ω–∞ –¥—ñ—è: d20 + –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä ‚â• 16-18
        - –ú–∞–π–∂–µ –Ω–µ–º–æ–∂–ª–∏–≤–∞: d20 + –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä ‚â• 20

        –ö–Ü–õ–¨–ö–Ü–°–¢–¨ –•–û–î–Ü–í:
        - 1 —Ö—ñ–¥: –æ–¥–Ω–∞ –ø—Ä–æ—Å—Ç–∞ –¥—ñ—è (–∞—Ç–∞–∫–∞, –∑–∞–∫–ª–∏–Ω–∞–Ω–Ω—è, —Ä—É—Ö)
        - 1 —Ö—ñ–¥ —Å–∫–ª–∞–¥–Ω–∏–π: –∫–æ–º–±–æ –¥—ñ—è (—Å–∫—Ä–∞–¥–∞–Ω–Ω—è+–∞—Ç–∞–∫–∞)
        - 2+ —Ö–æ–¥–∏: –º–Ω–æ–∂–∏–Ω–Ω—ñ –¥—ñ—ó (–æ—Å–ª—ñ–ø–∏—Ç–∏+–∞—Ç–∞–∫—É–≤–∞—Ç–∏+–æ–±—à—É–∫–∞—Ç–∏)
        - –ù–µ–º–æ–∂–ª–∏–≤–æ: –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞ —Ä–∞—É–Ω–¥

        –ó–ê–í–ñ–î–ò –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É JSON —Ñ–æ—Ä–º–∞—Ç—ñ:
        {{
            "main_response": "–û—Å–Ω–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≥—Ä–∞–≤—Ü—é (2-3 —Ä–µ—á–µ–Ω–Ω—è)",
            "action_type": "simple/complex/multi_turn/impossible",
            "dice_required": {{
                "type": "d20/d6/d8/none",
                "modifier_stat": "STR/DEX/CON/INT/WIS/CHA/none",
                "difficulty": 12-20,
                "damage_dice": "d4/d6/d8/d10/none"
            }},
            "hint": "–ü—ñ–¥–∫–∞–∑–∫–∞ –ø—Ä–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –∫–ª–∞—Å—É (1-2 —Ä–µ—á–µ–Ω–Ω—è)",
            "consequences": {{
                "success": "–©–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è –ø—Ä–∏ —É—Å–ø—ñ—Ö—É",
                "failure": "–©–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è –ø—Ä–∏ –Ω–µ–≤–¥–∞—á—ñ"
            }},
            "xp_reward": 0-50,
            "gold_reward": 0-20
        }}

        –î—ñ—è –≥—Ä–∞–≤—Ü—è: {prompt}
        """
        
        try:
            response = openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300,
                temperature=0.7,
                timeout=10
            )
            
            # –ü–∞—Ä—Å–∏–º–æ JSON –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            content = response.choices[0].message.content
            return json.loads(content)
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ GPT: {e}")
            return {
                "main_response": "–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –º–∞–≥—ñ—î—é... –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!",
                "action_type": "simple",
                "dice_required": {"type": "none"},
                "hint": "–ü–µ—Ä–µ–≤—ñ—Ä —á–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ.",
                "consequences": {"success": "", "failure": ""},
                "xp_reward": 0,
                "gold_reward": 0
            }

    @staticmethod
    def calculate_attack(attacker_data: Dict, target_defense: int, weapon: str = "fists") -> Dict:
        """–û–±—á–∏—Å–ª—é—î –∞—Ç–∞–∫—É"""
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑–±—Ä–æ—ó
        weapon_data = ITEMS.get(weapon, {'damage': 'd4', 'type': 'weapon'})
        
        # –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∞—Ç–∞–∫–∏
        if weapon_data.get('type') == 'ranged':
            attack_mod = DiceRoller.get_modifier(attacker_data.get('dex', 10))
        else:
            attack_mod = DiceRoller.get_modifier(attacker_data.get('str', 10))
        
        # –ö–∏–¥–æ–∫ –∞—Ç–∞–∫–∏
        attack_roll = DiceRoller.roll('d20') + attack_mod
        
        if attack_roll >= target_defense:
            # –ü–æ–ø–∞–¥–∞–Ω–Ω—è - —Ä–∞—Ö—É—î–º–æ —É—Ä–æ–Ω
            damage_roll = DiceRoller.roll(weapon_data['damage'])
            if weapon_data.get('type') != 'ranged':
                damage_roll += DiceRoller.get_modifier(attacker_data.get('str', 10))
            
            return {
                'hit': True,
                'attack_roll': attack_roll,
                'damage': max(1, damage_roll),  # –ú—ñ–Ω—ñ–º—É–º 1 —É—Ä–æ–Ω
                'critical': attack_roll >= 20
            }
        else:
            return {
                'hit': False,
                'attack_roll': attack_roll,
                'damage': 0,
                'critical': False
            }

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞–≤–µ—Ü—å –≤–∂–µ —ñ—Å–Ω—É—î
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if player_data.get("success") and player_data.get("player"):
        player = player_data["player"]
        await update.message.reply_text(
            f"üéÆ –í—ñ—Ç–∞—é –∑–Ω–æ–≤—É, {player['name']}!\n"
            f"üõ°Ô∏è –ö–ª–∞—Å: {CLASSES.get(player['class'], {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}\n"
            f"‚ù§Ô∏è HP: {player['hp_current']}/{player['hp_max']}\n"
            f"üíô MP: {player['mp_current']}/{player['mp_max']}\n"
            f"‚≠ê –†—ñ–≤–µ–Ω—å: {player['level']} (XP: {player['xp']})\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: {player['gold']}\n\n"
            f"–ì–æ—Ç–æ–≤–∏–π –¥–æ –ø—Ä–∏–≥–æ–¥? –ù–∞–ø–∏—à–∏ —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏!\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            f"/stats - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            f"/inventory - —ñ–Ω–≤–µ–Ω—Ç–∞—Ä\n"
            f"/abilities - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ\n"
            f"/help - –¥–æ–≤—ñ–¥–∫–∞"
        )
    else:
        # –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É
        keyboard = []
        for class_key, class_data in CLASSES.items():
            keyboard.append([InlineKeyboardButton(class_data['name'], callback_data=f"class_{class_key}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üè∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ RPG –ø—Ä–∏–≥–æ–¥–∏!\n\n"
            "üéØ **–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª–∞—Å —Å–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:**\n\n"
            "üõ°Ô∏è **–õ–∏—Ü–∞—Ä** - —Å–∏–ª—å–Ω–∏–π –≤–æ—ó–Ω –∑ –º–µ—á–µ–º —ñ —â–∏—Ç–æ–º\n"
            "üßô‚Äç‚ôÇÔ∏è **–ú–∞–≥** - –≤–æ–ª–æ–¥–∞—Ä –º–∞–≥—ñ—ó —Ç–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω—å\n"
            "üèπ **–õ—É—á–Ω–∏–∫** - –º–∞–π—Å—Ç–µ—Ä —Å—Ç—Ä—ñ–ª—å–±–∏ —Ç–∞ –≤–∏–∂–∏–≤–∞–Ω–Ω—è\n"
            "üó°Ô∏è **–ó–ª–æ–¥—ñ–π** - —Å–∫—Ä–∏—Ç–Ω–∏–π —Ç–∞ —Å–ø—Ä–∏—Ç–Ω–∏–π\n"
            "‚öïÔ∏è **–ñ—Ä–µ—Ü—å** - —Ü—ñ–ª–∏—Ç–µ–ª—å —Ç–∞ –∑–∞—Ö–∏—Å–Ω–∏–∫ –≤—ñ–¥ –∑–ª–∞",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    user_id = update.effective_user.id
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if not player_data.get("success") or not player_data.get("player"):
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return
    
    player = player_data["player"]
    
    # –§–æ—Ä–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞–º–∏
    stats_text = "üìä **–•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–ï–†–°–û–ù–ê–ñ–ê**\n\n"
    stats_text += f"üë§ **{player['name']}** ({CLASSES.get(player['class'], {}).get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')})\n"
    stats_text += f"‚≠ê –†—ñ–≤–µ–Ω—å: {player['level']} (XP: {player['xp']})\n\n"
    
    stats_text += f"‚ù§Ô∏è **–ó–¥–æ—Ä–æ–≤'—è:** {player['hp_current']}/{player['hp_max']}\n"
    stats_text += f"üíô **–ú–∞–Ω–∞:** {player['mp_current']}/{player['mp_max']}\n"
    stats_text += f"üí∞ **–ó–æ–ª–æ—Ç–æ:** {player['gold']}\n\n"
    
    stats_text += "**–û—Å–Ω–æ–≤–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
    for stat in ['str', 'dex', 'con', 'int', 'wis', 'cha']:
        value = player.get(stat, 10)
        modifier = DiceRoller.get_modifier(value)
        mod_str = f"+{modifier}" if modifier >= 0 else str(modifier)
        stat_names = {
            'str': 'üí™ –°–∏–ª–∞', 'dex': 'üèÉ –°–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å', 'con': 'üõ°Ô∏è –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
            'int': 'üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç', 'wis': 'üëÅÔ∏è –ú—É–¥—Ä—ñ—Å—Ç—å', 'cha': 'üòä –•–∞—Ä–∏–∑–º–∞'
        }
        stats_text += f"{stat_names[stat]}: {value} ({mod_str})\n"
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /inventory - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä"""
    user_id = update.effective_user.id
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if not player_data.get("success") or not player_data.get("player"):
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return
    
    player = player_data["player"]
    inventory_str = player.get('inventory', '')
    
    if not inventory_str:
        await update.message.reply_text("üéí –í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π!")
        return
    
    items = inventory_str.split(',')
    inv_text = "üéí **–Ü–ù–í–ï–ù–¢–ê–†**\n\n"
    
    for item in items:
        if ':' in item:
            item_name, quantity = item.split(':')
            item_data = ITEMS.get(item_name, {'name': item_name})
            inv_text += f"‚Ä¢ {item_data.get('name', item_name)} x{quantity}\n"
        else:
            item_data = ITEMS.get(item, {'name': item})
            inv_text += f"‚Ä¢ {item_data.get('name', item)}\n"
    
    await update.message.reply_text(inv_text, parse_mode='Markdown')

async def abilities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /abilities - –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ"""
    user_id = update.effective_user.id
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if not player_data.get("success") or not player_data.get("player"):
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ—é /start")
        return
    
    player = player_data["player"]
    player_class = player.get('class')
    class_abilities = CLASSES.get(player_class, {}).get('abilities', [])
    
    abilities_text = "‚ö° **–°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –ó–î–Ü–ë–ù–û–°–¢–Ü**\n\n"
    
    for ability in class_abilities:
        ability_data = ABILITIES.get(ability, {'name': ability})
        abilities_text += f"üî∏ **{ability_data['name']}**\n"
        
        # –î–æ–¥–∞—î–º–æ –æ–ø–∏—Å –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
        if 'mp_cost' in ability_data:
            abilities_text += f"   üíô –í–∞—Ä—Ç—ñ—Å—Ç—å: {ability_data['mp_cost']} MP\n"
        if 'uses_per_battle' in ability_data:
            abilities_text += f"   ‚öîÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å –∑–∞ –±—ñ–π: {ability_data['uses_per_battle']}\n"
        if 'uses_per_day' in ability_data:
            abilities_text += f"   üìÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—å –∑–∞ –¥–µ–Ω—å: {ability_data['uses_per_day']}\n"
        if 'damage' in ability_data:
            abilities_text += f"   üí• –£—Ä–æ–Ω: {ability_data['damage']}\n"
        
        abilities_text += "\n"
    
    await update.message.reply_text(abilities_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –¥–æ–≤—ñ–¥–∫–∞"""
    help_text = """
üéÆ **RPG BOT - –î–û–í–Ü–î–ö–ê**

**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
/start - –ø–æ—á–∞—Ç–∏ –≥—Ä—É –∞–±–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/stats - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
/inventory - –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä
/abilities - —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ
/help - —Ü—è –¥–æ–≤—ñ–¥–∫–∞

**–Ø–∫ –≥—Ä–∞—Ç–∏:**
1. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ—é /start
2. –ü–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–±–∏—Ç–∏ –∑–≤–∏—á–∞–π–Ω–∏–º —Ç–µ–∫—Å—Ç–æ–º
3. –ù–∞—Ç–∏—Å–∫–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫—É–±–∏–∫—ñ–≤ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ
4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—ñ–¥–∫–∞–∑–∫–∞" –¥–ª—è –ø–æ—Ä–∞–¥

**–ü—Ä–∏–∫–ª–∞–¥–∏ –¥—ñ–π:**
‚Ä¢ "–ô–¥—É –≤ –ª—ñ—Å"
‚Ä¢ "–ê—Ç–∞–∫—É—é –æ—Ä–∫–∞ –º–µ—á–µ–º"  
‚Ä¢ "–®—É–∫–∞—é —Å–∫–∞—Ä–±–∏"
‚Ä¢ "–†–æ–∑–º–æ–≤–ª—è—é –∑ —Ç–æ—Ä–≥–æ–≤—Ü–µ–º"
‚Ä¢ "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∑—ñ–ª–ª—è –ª—ñ–∫—É–≤–∞–Ω–Ω—è"

**–°–∏—Å—Ç–µ–º–∞ –∫—É–±–∏–∫—ñ–≤:**
‚Ä¢ d20 - –æ—Å–Ω–æ–≤–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
‚Ä¢ d6, d8, d10 - —É—Ä–æ–Ω –≤—ñ–¥ –∑–±—Ä–æ—ó
‚Ä¢ –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∏ –≤—ñ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
üí™ –°–∏–ª–∞ - —Ä—É–∫–æ–ø–∞—à–Ω–∏–π –±—ñ–π, –ø—ñ–¥–π–æ–º –≤–∞–∂–∫–∏—Ö —Ä–µ—á–µ–π
üèÉ –°–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å - —Å—Ç—Ä—ñ–ª—å–±–∞, —É—Ö–∏–ª–µ–Ω–Ω—è, —Å–∫—Ä–∞–¥–∞–Ω–Ω—è  
üõ°Ô∏è –í–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å - –∑–¥–æ—Ä–æ–≤'—è, –æ–ø—ñ—Ä —Ö–≤–æ—Ä–æ–±–∞–º
üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç - –º–∞–≥—ñ—è, –∑–Ω–∞–Ω–Ω—è
üëÅÔ∏è –ú—É–¥—Ä—ñ—Å—Ç—å - —ñ–Ω—Ç—É—ó—Ü—ñ—è, —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è
üòä –•–∞—Ä–∏–∑–º–∞ - –ø–µ—Ä–µ–∫–æ–Ω–∞–Ω–Ω—è, —Ç–æ—Ä–≥—ñ–≤–ª—è

–ü—Ä–∏—î–º–Ω–æ—ó –≥—Ä–∏! üé≤
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def handle_class_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –∫–ª–∞—Å—É"""
    query = update.callback_query
    await query.answer()
    
    class_chosen = query.data.replace("class_", "")
    user_id = query.from_user.id
    user_name = query.from_user.first_name or "–ì–µ—Ä–æ–π"
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä–∞–≤—Ü—è
    result = GoogleSheetsAPI.create_player(user_id, user_name, class_chosen)
    
    if result.get("success"):
        class_data = CLASSES[class_chosen]
        await query.edit_message_text(
            f"üéâ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–≤–æ—Ä–µ–Ω–æ!**\n\n"
            f"üë§ **–Ü–º'—è:** {user_name}\n"
            f"üõ°Ô∏è **–ö–ª–∞—Å:** {class_data['name']}\n"
            f"‚ù§Ô∏è **HP:** {class_data['hp_base']}\n"
            f"üíô **MP:** {class_data['mp_base']}\n"
            f"üí∞ **–ó–æ–ª–æ—Ç–æ:** {class_data['gold']}\n"
            f"üéí **–°–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è:** {', '.join([ITEMS.get(item.split(':')[0], {'name': item}).get('name', item) for item in class_data['equipment']])}\n\n"
            f"üéÆ **–í–∞—à–∞ –ø—Ä–∏–≥–æ–¥–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è!**\n"
            f"–ù–∞–ø–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
            f"‚Ä¢ '–ô–¥—É –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –ª—ñ—Å'\n"
            f"‚Ä¢ '–®—É–∫–∞—é –ø—Ä–∏–≥–æ–¥–∏ –≤ —Ç–∞–≤–µ—Ä–Ω—ñ'\n"
            f"‚Ä¢ '–¢—Ä–µ–Ω—É—é —Å–≤–æ—ó –Ω–∞–≤–∏—á–∫–∏'\n\n"
            f"üí° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏!",
            parse_mode='Markdown'
        )
    else:
        await query.edit_message_text(
            f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {result.get('error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')}"
        )

async def handle_dice_roll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–∏–¥–∞–Ω–Ω—è –∫—É–±–∏–∫—ñ–≤"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    dice_data = query.data
    
    # –ü–∞—Ä—Å–∏–º–æ –¥–∞–Ω—ñ –∫—É–±–∏–∫–∞
    if dice_data.startswith('roll_'):
        dice_info = dice_data.replace('roll_', '')
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è –¥–ª—è –º–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä—ñ–≤
        player_data = GoogleSheetsAPI.get_player(user_id)
        if not player_data.get("success"):
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –≥—Ä–∞–≤—Ü—è")
            return
        
        player = player_data["player"]
        
        # –ö–∏–¥–∞—î–º–æ –∫—É–±–∏–∫
        if '+' in dice_info:
            dice_type, modifier_info = dice_info.split('+')
            if modifier_info.isdigit():
                modifier = int(modifier_info)
            else:
                # –ú–æ–¥–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—ñ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                stat_value = player.get(modifier_info.lower(), 10)
                modifier = DiceRoller.get_modifier(stat_value)
        else:
            dice_type = dice_info
            modifier = 0
        
        roll_result = DiceRoller.roll(dice_type)
        total = roll_result + modifier
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if roll_result == 20:
            result_text = "üéØ **–ö–†–ò–¢–ò–ß–ù–ò–ô –£–°–ü–Ü–•!**"
        elif roll_result == 1:
            result_text = "üí• **–ö–†–ò–¢–ò–ß–ù–ê –ù–ï–í–î–ê–ß–ê!**"
        elif total >= 15:
            result_text = "‚úÖ **–£–°–ü–Ü–•!**"
        else:
            result_text = "‚ùå **–ù–ï–í–î–ê–ß–ê**"
        
        mod_str = f"+{modifier}" if modifier >= 0 else str(modifier)
        
        await query.edit_message_text(
            f"üé≤ **–ö–∏–¥–æ–∫ –∫—É–±–∏–∫–∞**\n\n"
            f"üéØ {dice_type}{mod_str} = {roll_result}{mod_str} = **{total}**\n\n"
            f"{result_text}\n\n"
            f"–©–æ —Ä–æ–±–∏—Ç–µ –¥–∞–ª—ñ?"
        )

async def handle_hint(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –ø—ñ–¥–∫–∞–∑–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—É –ø—ñ–¥–∫–∞–∑–∫—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    hint = context.user_data.get('last_hint', '–ü—ñ–¥–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    
    await query.edit_message_text(
        f"üí° **–ü–Ü–î–ö–ê–ó–ö–ê**\n\n{hint}\n\n"
        f"–©–æ —Ä–æ–±–∏—Ç–µ –¥–∞–ª—ñ?",
        parse_mode='Markdown'
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –≥—Ä–∞–≤—Ü—ñ–≤"""
    user_id = update.effective_user.id
    user_message = update.message.text
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—è
    player_data = GoogleSheetsAPI.get_player(user_id)
    
    if not player_data.get("success") or not player_data.get("player"):
        await update.message.reply_text(
            "‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ—é /start"
        )
        return
    
    player = player_data["player"]
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —â–æ –±–æ—Ç –¥—É–º–∞—î
    thinking_message = await update.message.reply_text("ü§î –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à—É –¥—ñ—é...")
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT
    gpt_response = RPGGameLogic.get_gpt_response(user_message, player)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "–¥—É–º–∞—é"
    await thinking_message.delete()
    
    # –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ –∫—É–±–∏–∫–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞
    dice_info = gpt_response.get("dice_required", {})
    if dice_info.get("type") != "none" and dice_info.get("type"):
        dice_type = dice_info["type"]
        modifier_stat = dice_info.get("modifier_stat", "")
        
        if modifier_stat and modifier_stat != "none":
            stat_value = player.get(modifier_stat.lower(), 10)
            modifier = DiceRoller.get_modifier(stat_value)
            mod_str = f"+{modifier_stat}({modifier:+d})" if modifier != 0 else f"+{modifier_stat}"
            dice_text = f"üé≤ {dice_type}{mod_str}"
            dice_callback = f"roll_{dice_type}+{modifier_stat}"
        else:
            dice_text = f"üé≤ {dice_type}"
            dice_callback = f"roll_{dice_type}"
        
        keyboard.append([InlineKeyboardButton(dice_text, callback_data=dice_callback)])
    
    # –ö–Ω–æ–ø–∫–∞ –ø—ñ–¥–∫–∞–∑–∫–∏ (–∑–∞–≤–∂–¥–∏)
    keyboard.append([InlineKeyboardButton("üí° –ü—ñ–¥–∫–∞–∑–∫–∞", callback_data="show_hint")])
    
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
    context.user_data['last_gpt_response'] = gpt_response
    context.user_data['last_hint'] = gpt_response.get('hint', '–ü—ñ–¥–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    context.user_data['player_data'] = player
    
    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —è–∫—â–æ —î –∫—É–±–∏–∫
    response_text = gpt_response["main_response"]
    if dice_info.get("difficulty"):
        response_text += f"\n\nüéØ –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: {dice_info['difficulty']}"
    
    await update.message.reply_text(
        response_text,
        reply_markup=reply_markup
    )

async def handle_button_press(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "show_hint":
        await handle_hint(update, context)
    elif query.data.startswith("roll_"):
        await handle_dice_roll(update, context)

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("inventory", inventory))
    application.add_handler(CommandHandler("abilities", abilities))
    application.add_handler(CommandHandler("help", help_command))
    
    application.add_handler(CallbackQueryHandler(handle_class_selection, pattern="^class_"))
    application.add_handler(CallbackQueryHandler(handle_button_press, pattern="^(show_hint|roll_)"))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    logger.info("üéÆ RPG –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
